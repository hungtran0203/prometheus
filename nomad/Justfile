set export # This makes environment variables persist between recipe lines

NOMAD_ADDR := env_var_or_default("NOMAD_ADDR", "http://192.168.1.104:4646")
NOMAD_SKIP_VERIFY := env_var_or_default("NOMAD_SKIP_VERIFY", "true")
NOMAD_JOB_FILE_DEFAULT := env_var_or_default("NOMAD_JOB_FILE", "./jobs/vault-example.hcl")

# Nomad Commands - Task Runner
# Run commands with: just -f nomad/Justfile <command>

# Default recipe to display help information
default:
    @just --list

# Start Nomad on the host
# Usage: just -f nomad/Justfile start
start:
    @echo "Creating local data directory..."
    @mkdir -p ./data
    @echo "Starting Nomad on the host..."
    @echo "Stopping any existing container Nomad instance first..."
    @docker stop hc-nomad 2>/dev/null || true
    @echo "Starting local Nomad agent..."
    @nohup nomad agent -config=./config/local/nomad.hcl -dev > ./logs/nomad.log 2>&1 & echo $$! > ./logs/nomad.pid
    @echo "✅ Nomad is now running locally in the background (PID: $$(cat ./logs/nomad.pid))"
    @echo "Access the UI at http://localhost:4646"

# Stop local Nomad
# Usage: just -f nomad/Justfile stop
stop:
    @echo "Stopping local Nomad agent..."
    @if [ -f ./logs/nomad.pid ]; then \
        kill $$(cat ./logs/nomad.pid) 2>/dev/null || true; \
        rm ./logs/nomad.pid; \
        echo "✅ Nomad stopped"; \
    else \
        echo "No Nomad PID file found"; \
    fi

# Run a Nomad job
# Usage: just -f nomad/Justfile run job_file
# Example: just -f nomad/Justfile run ./jobs/vault-example.hcl
run job_file:
    @echo "Running Nomad job from {{job_file}}..."
    @nomad job run {{job_file}}

# Check status of Nomad jobs
# Usage: just -f nomad/Justfile status
status:
    @echo "Checking Nomad job status..."
    @nomad job status

# Shortcuts for common Raspberry Pi commands
# Usage: just -f nomad/Justfile setup-raspi
setup-raspi:
    @just -f nomad/Justfile ras setup-nomad

# Usage: just -f nomad/Justfile fix-raspi-drivers
fix-raspi-drivers:
    @just -f nomad/Justfile ras fix-drivers

# Usage: just -f nomad/Justfile fix-raspi-cgroups
fix-raspi-cgroups:
    @just -f nomad/Justfile ras fix-cgroups

# SSH into the Raspberry Pi
# Usage: just -f nomad/Justfile ssh-raspi
ssh-raspi:
    @just -f nomad/Justfile ras ssh 

config job_file:
    #!/usr/bin/env zsh
    export NOMAD_JOB_FILE={{job_file}}
    echo $NOMAD_JOB_FILE

# Stop a Nomad job
# Usage: just -f .nomad/Justfile stop-job job_name
# Example: just -f .nomad/Justfile stop-job indexing-v3-console-staging
stop-job job_name:
    @echo "Stopping Nomad job {{job_name}}..."
    @nomad job stop {{job_name}}

# Execute a job and connect to its task via shell
# Usage: just -f .nomad/Justfile exec job_file
# Example: just -f .nomad/Justfile exec ./jobs/indexing-v3-console-staging.hcl
# Get allocation ID from job name derived from HCL file
get-alloc-id job_file:
    #!/usr/bin/env bash
    JOB_NAME=$(grep -m 1 "job \".*\"" {{job_file}} | sed 's/job "\(.*\)".*/\1/')
    if [ -z "$JOB_NAME" ]; then
        echo "Error: Could not find job name in {{job_file}}" >&2
        exit 1
    fi
    
    # Get the latest running allocation ID for this job
    ALLOC_ID=$(nomad job status "$JOB_NAME" | grep -A 5 "Allocations" | awk '/running/ {print $1}' | head -n 1)
    
    if [ -z "$ALLOC_ID" ]; then
        echo "Error: No running allocations found for job $JOB_NAME" >&2
        exit 1
    fi
    
    echo $ALLOC_ID

# Execute a job and connect to its task via shell
# Usage: just -f .nomad/Justfile exec job_file
# Example: just -f .nomad/Justfile exec ./jobs/indexing-v3-console-staging.hcl
start-job job_file=NOMAD_JOB_FILE_DEFAULT:
    #!/usr/bin/env bash
    set -e
    
    # Function to print error and exit
    error_exit() {
        echo "❌ Error: $1"
        if [ ! -z "$2" ]; then
            echo "Details: $2"
        fi
        if [ ! -z "$3" ]; then
            echo "Command to check status: $3"
        fi
        exit 1
    }
    
    # Check if job file exists
    if [ ! -f "{{job_file}}" ]; then
        error_exit "Job file '{{job_file}}' not found"
    fi
    
    # Check if Nomad is running
    if ! nomad server members >/dev/null 2>&1; then
        error_exit "Nomad server is not running" "Start Nomad with: just -f nomad/Justfile start"
    fi
    
    # Get job name from file
    JOB_NAME=$(basename {{job_file}} .hcl)
    echo "Starting job {{job_file}}..."
    
    # Run the job and capture output
    if ! JOB_OUTPUT=$(nomad job run {{job_file}} 2>&1); then
        error_exit "Failed to start job" "$JOB_OUTPUT" "nomad job status $JOB_NAME"
    fi
    
    # Wait for allocation to be running with timeout
    echo "Waiting for allocation to be running..."
    TIMEOUT=60  # 60 seconds timeout
    START_TIME=$(date +%s)
    
    while true; do
        # Check timeout
        CURRENT_TIME=$(date +%s)
        ELAPSED=$((CURRENT_TIME - START_TIME))
        if [ $ELAPSED -gt $TIMEOUT ]; then
            error_exit "Timeout waiting for allocation to be running" \
                      "Job may still be starting or failed" \
                      "nomad job status $JOB_NAME"
        fi
        
        # Get allocation ID
        if ! ALLOC_OUTPUT=$(nomad job allocs -json $JOB_NAME 2>&1); then
            error_exit "Failed to get allocation info" "$ALLOC_OUTPUT" "nomad job status $JOB_NAME"
        fi
        
        # Check if we got valid JSON
        if ! echo "$ALLOC_OUTPUT" | jq . >/dev/null 2>&1; then
            error_exit "Invalid JSON response from Nomad" "$ALLOC_OUTPUT" "nomad job status $JOB_NAME"
        fi
        
        ALLOC_ID=$(echo "$ALLOC_OUTPUT" | jq -r '.[0].ID')
        if [ -z "$ALLOC_ID" ] || [ "$ALLOC_ID" = "null" ]; then
            echo "Waiting for allocation... ($ELAPSED/$TIMEOUT seconds)"
            sleep 2
            continue
        fi
        
        # Get allocation status
        if ! STATUS_OUTPUT=$(nomad alloc status -json $ALLOC_ID 2>&1); then
            error_exit "Failed to get allocation status" "$STATUS_OUTPUT" "nomad alloc status $ALLOC_ID"
        fi
        
        # Check if we got valid JSON
        if ! echo "$STATUS_OUTPUT" | jq . >/dev/null 2>&1; then
            error_exit "Invalid JSON response from Nomad" "$STATUS_OUTPUT" "nomad alloc status $ALLOC_ID"
        fi
        
        STATUS=$(echo "$STATUS_OUTPUT" | jq -r '.ClientStatus')
        if [ "$STATUS" = "running" ]; then
            break
        elif [ "$STATUS" = "failed" ]; then
            # Get failure reason if available
            FAILURE_REASON=$(echo "$STATUS_OUTPUT" | jq -r '.TaskStates[].Events[-1].Message // "Unknown reason"')
            error_exit "Allocation failed to start" "$FAILURE_REASON" "nomad alloc status $ALLOC_ID"
        fi
        
        echo "Allocation status: $STATUS ($ELAPSED/$TIMEOUT seconds)"
        sleep 2
    done
    
    # Get task name
    if ! TASK_OUTPUT=$(nomad alloc status -json $ALLOC_ID 2>&1); then
        error_exit "Failed to get task info" "$TASK_OUTPUT" "nomad alloc status $ALLOC_ID"
    fi
    
    # Check if we got valid JSON
    if ! echo "$TASK_OUTPUT" | jq . >/dev/null 2>&1; then
        error_exit "Invalid JSON response from Nomad" "$TASK_OUTPUT" "nomad alloc status $ALLOC_ID"
    fi
    
    TASK_NAME=$(echo "$TASK_OUTPUT" | jq -r '.TaskStates | keys | .[0]')
    if [ -z "$TASK_NAME" ] || [ "$TASK_NAME" = "null" ]; then
        error_exit "No tasks found in allocation" "Allocation may be in an invalid state" "nomad alloc status $ALLOC_ID"
    fi
    
    # Check if task is running
    TASK_STATUS=$(echo "$TASK_OUTPUT" | jq -r ".TaskStates.\"$TASK_NAME\".State")
    if [ "$TASK_STATUS" != "running" ]; then
        error_exit "Task is not running" "Task state: $TASK_STATUS" "nomad alloc status $ALLOC_ID"
    fi
    
# Execute a command in the allocation of a given job
exec job_file=NOMAD_JOB_FILE_DEFAULT command="/bin/bash":
    #!/usr/bin/env bash
    ALLOC_ID=$(just get-alloc-id {{job_file}})
    echo "Executing in allocation: $ALLOC_ID"
    nomad alloc exec -i -t "$ALLOC_ID" {{command}}

# Transfer files to an allocation using tar streaming
# Usage: just push <local_path> [job_file] [destination_path_on_alloc]
push local_path job_file=NOMAD_JOB_FILE_DEFAULT remote_path="/alloc":
    #!/usr/bin/env bash
    ALLOC_ID=$(just get-alloc-id {{job_file}})
    echo "Pushing files to allocation: $ALLOC_ID"
    
    # Create target directory in allocation
    nomad alloc exec "$ALLOC_ID" mkdir -p {{remote_path}}
    
    # For a directory: tar and stream
    if [ -d "{{local_path}}" ]; then
        echo "Streaming directory to allocation..."
        BASE_DIR=$(basename "{{local_path}}")
        TARGET_DIR="{{remote_path}}/$BASE_DIR"
        
        # Create target directory
        nomad alloc exec "$ALLOC_ID" mkdir -p "$TARGET_DIR"
        
        # Stream files
        cd "{{local_path}}" && \
        tar cf - . | nomad alloc exec -i "$ALLOC_ID" bash -c "cd \"$TARGET_DIR\" && tar xf -"
    # For a single file: use cat and redirections  
    else
        echo "Streaming file to allocation..."
        cat "{{local_path}}" | nomad alloc exec -i "$ALLOC_ID" \
        bash -c "cat > {{remote_path}}/$(basename "{{local_path}}")"
    fi
    
    echo "Transfer complete!"

# Get files from an allocation using tar streaming
# Usage: just pull <remote_path> [job_file] [local_destination_path]  
pull remote_path job_file=NOMAD_JOB_FILE_DEFAULT local_path="./alloc-data":
    #!/usr/bin/env bash
    ALLOC_ID=$(just get-alloc-id {{job_file}})
    echo "Pulling from allocation: $ALLOC_ID"
    
    # Create local destination directory if needed
    mkdir -p "{{local_path}}"
    
    # Check if remote path is a directory or file
    IS_DIR=$(nomad alloc exec "$ALLOC_ID" bash -c "[[ -d {{remote_path}} ]] && echo 'yes' || echo 'no'")
    
    # For a directory: tar and stream back
    if [ "$IS_DIR" = "yes" ]; then
        echo "Streaming directory from allocation..."
        nomad alloc exec -i "$ALLOC_ID" bash -c "cd {{remote_path}} && tar cf - ." | \
        tar xf - -C "{{local_path}}"
    # For a single file: use cat from allocation
    else
        echo "Streaming file from allocation..."
        nomad alloc exec -i "$ALLOC_ID" cat "{{remote_path}}" > "{{local_path}}/$(basename "{{remote_path}}")"
    fi
    
    echo "Transfer complete!"